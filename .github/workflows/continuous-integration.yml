# GitHub Actions Documentation: https://docs.github.com/en/actions

name: "Run CI Tests"

on:
  push:
    paths:
      - .github/workflows/continuous-integration.yml
      - packages/**/*.php
      - tests/**/*.php
    branches:
      - "main"
    tags:
      - "*"
  pull_request:
    branches:
      - "main"

# Cancels all previous workflow runs for the same branch that have not yet completed.
concurrency:
  # The concurrency group contains the workflow name and the branch name.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  COMPOSER_ROOT_VERSION: "1.99.99"

jobs:
  coding-standards:
    name: "Coding standards"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Checkout repository"
        uses: "actions/checkout@v2"

      - name: "Install PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          php-version: "latest"
          coverage: "none"

      - name: "Install dependencies (Composer)"
        uses: "ramsey/composer-install@v2"

      - name: "Check syntax (php-parallel-lint)"
        shell: "bash"
        run: "composer dev:lint:syntax"

      - name: "Check coding standards (PHP_CodeSniffer)"
        shell: "bash"
        run: "composer dev:lint:style"

  static-analysis:
    name: "Static analysis"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Checkout repository"
        uses: "actions/checkout@v2"

      - name: "Install PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          php-version: "latest"
          coverage: "none"

      - name: "Install dependencies (Composer)"
        uses: "ramsey/composer-install@v2"

      - name: "Statically analyze code (PHPStan)"
        shell: "bash"
        run: "composer dev:analyze:phpstan"

      - name: "Statically analyze code (Psalm)"
        shell: "bash"
        run: "composer dev:analyze:psalm -- --shepherd"

  security-analysis:
    name: "Security analysis"
    needs: ["coding-standards", "static-analysis"]
    runs-on: "ubuntu-latest"
    steps:
      - name: "Checkout repository"
        uses: "actions/checkout@v2"

      - name: "Install PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          php-version: "latest"
          coverage: "none"

      - name: "Install dependencies (Composer)"
        uses: "ramsey/composer-install@v2"

      - name: "Analyze security of code (Psalm)"
        shell: "bash"
        run: "./vendor/bin/psalm --taint-analysis --report=build/logs/psalm.sarif"

      - name: "Upload security analysis results to GitHub"
        uses: "github/codeql-action/upload-sarif@v1"
        with:
          sarif_file: "build/logs/psalm.sarif"

  code-coverage:
    name: "Code coverage"
    needs: ["coding-standards", "static-analysis"]
    runs-on: "ubuntu-latest"
    steps:
      - name: "Checkout repository"
        uses: "actions/checkout@v2"

      - name: "Setup NodeJS"
        uses: "actions/setup-node@v2"
        with:
          node-version: '14'

      - name: "Install PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          php-version: "latest"
          coverage: "pcov"
          ini-values: "memory_limit=-1,pcov.directory=packages"

      - name: "Install dependencies (Composer)"
        uses: "ramsey/composer-install@v2"

      - name: "Setup and build node deps"
        run: "cd packages/kickflip-docs && npm install && npm run dev && cd"

      - name: "Run unit tests (PHPUnit)"
        shell: "bash"
        run: "composer dev:test:coverage:ci"

      - name: "Publish coverage report to Codecov"
        uses: "codecov/codecov-action@v2"
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./build/coverage

      - name: "Publish coverage report to CodeClimate"
        uses: "paambaati/codeclimate-action@v3"
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CODE_CLIMATE_TOKEN }}
        with:
          coverageLocations: |
            ${{github.workspace}}/build/coverage/clover.xml:clover
            ${{github.workspace}}/build/coverage/cobertura.xml:cobertura

  unit-tests:
    name: "Unit tests - P${{ matrix.php-version }} - L${{ matrix.laravel-version }} - ${{ matrix.dependencies }} - ${{ matrix.operating-system }}"

    needs: ["code-coverage", "security-analysis"]
    runs-on: ${{ matrix.operating-system }}

    strategy:
      fail-fast: false
      matrix:
        laravel-version:
          - "8.*"
        php-version:
          - "8.0"
          - "8.1"
        operating-system:
          - "macos-latest"
          - "ubuntu-latest"
          - "windows-latest"
        dependencies:
          - "lowest"
          - "highest"

    steps:
      - name: "Configure Git (for Windows)"
        if: ${{ matrix.operating-system == 'windows-latest' }}
        shell: "bash"
        run: |
          git config --system core.autocrlf false
          git config --system core.eol lf

      - name: "Checkout repository"
        uses: "actions/checkout@v2"

      - name: "Setup NodeJS"
        uses: "actions/setup-node@v2"
        with:
          node-version: '14'

      - name: "Install PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          php-version: "${{ matrix.php-version }}"
          extensions: fileinfo, filter, json
          coverage: "none"

      - name: "Install dependencies (Composer)"
        uses: "ramsey/composer-install@v2"
        with:
          dependency-versions: "${{ matrix.dependencies }}"
          composer-options: "${{ matrix.composer-options }}"

      - name: "Setup and build node deps"
        run: "cd packages/kickflip-docs && npm install && npm run dev && cd"

      - name: "Run unit tests (PHPUnit)"
        shell: "bash"
        run: "composer dev:test:unit"
